swagger: "2.0"
info:
  description: "A collections of API provided by login services."
  version: "1.0.0"
  title: "Swagger Login Service"
host: "petstore.swagger.io"
basePath: "/api/login"

schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "pet"
      summary: "Add a new user to the store"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /user/{userId}:
    get:
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of a user to return a who user"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
    delete:
      summary: "Deletes a user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User id to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /user/login:
    get:
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
definitions:
  User:
    type: "object"
    required:
    - "name"
    - "email"
    - "id"
    properties:
      id:
        type: string
        format: uuid
      name:
        type: "string"
        example: "Michael Jordan"
      email:
        type: "string"
        format: email
        description: "email of the users"