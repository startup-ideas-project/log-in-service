// This file is auto generated by swagger
const USER_DAO = require('../dao/user');
const { v4: uuidv4 } = require('uuid');
const moment = require('moment')
const jwt = require('jsonwebtoken')

// local imports
const {configs} = require('../../configs/app-config');


/**
 * Add a new user to the store
 * 
 *
 * body User Pet object that needs to be added to the store
 * no response value expected for this operation
 **/
 const addUser = async (req, res) => {
    const user = req.body.userInfo // encrypted body within the DB
    //password should be encrypted before sending to the wire. 
    user.Id = uuidv4();
    user.created = moment().format()
    // need validation  before submitting
    const registeredUser = await USER_DAO.getUser(user.email).then(data => data.rows)
    if(registeredUser.length > 1){
        res.send('Email already existed')
        return
    }
    USER_DAO.createUser(user).then(_ => {
        res.sendStatus(200)
    }).catch(err => console.log(err));
  }

/**
 * Deletes a user
 *
 * userId UUID User id to delete
 * no response value expected for this operation
 **/
const deleteUser = (userId) => {
  return 200;
}


/**
 * Find user by ID
 * Returns a single user
 *
 * userId UUID ID of a user to return a who user
 * returns User
 **/
const getUserById = async (req, res) => {

}


/**
 * Logs user into the system
 * 
 *
 * username String The user name for login
 * password String The password for login in clear text
 * returns String
 **/
const loginUser = async (req,res)  => {
    const email = req.body.userInfo.email
    const password = req.body.userInfo.password
    const count = await USER_DAO.matchUser(email,password).then(data => data.rows)
    const user = {
      email: count.email,
      password: count.password
    }
    if (count.length === 1){
      res.send({
        token: generateToken(user)
      })
    } else {
      res.sendStatus(500)
    }
}

/**
 * Logs out current logged in user session
 * 
 *
 * no response value expected for this operation
 **/
 const logoutUser = () => {
    // return new Promise((resolve, reject) {
    //   resolve();
    // });
  }

const getAllUser = async (req, res) => {
  const emails = await USER_DAO.getAllUser().then(data => data.rows)
  res.send(JSON.stringify(emails))
}

const generateToken = (user) => {
  return jwt.sign({data: user}, configs.jwtSecret, {expiresIn: '24h'})
}

const authenticate = async (req,res) => {
  res.sendStatus(200)
}

module.exports = {
    loginUser,
    logoutUser,
    addUser,
    deleteUser,
    getUserById,
    authenticate,
    getAllUser
}

